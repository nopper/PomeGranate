{"name":"Pomegranate","body":"# What is PomeGranate\r\n\r\nPomeGranate is just an experiment in order to provide a fault tolerant\r\nMapReduce framework built on top of MPI and the HTTP protocol, through\r\nthe use of Python programming language.\r\n\r\nIn the source tarball we also provide a simple application of the\r\nframework used to create a TF-IDF index of Wikipedia.\r\n\r\n# Requirements\r\n\r\nIn order to compile and succesfully run this application you need:\r\n\r\n  - A Python interpreter targeting 2.x series\r\n  - A C compiler preferably GNU GCC\r\n  - An MPI implementation.\r\n\r\nThe application was tested under:\r\n\r\n  - An Intel Core 2 (T7600) Linux machine with 3.1.0-x86\\_64 kernel\r\n  - Python 2.7.2\r\n  - gcc (GCC) 4.6.2\r\n  - mpich2 1.4-1\r\n\r\n## Python requirements\r\n\r\nIn order to install the proper requirements for the Python interpreter I\r\nreally suggest you to use virtualenv and pip utilities.\r\n\r\n  - `pip install mpi4py` (1.2.2 - used for coordinating workers)\r\n  - `pip install jinja2` (2.6 - used for the Web interface)\r\n\r\nIf you want you can optionally install the fsdfs module (fucking simple\r\ndistributed filesystem) in order to get some performance boost in case\r\nyou are using a slow distributed filesystem like NFS. To do it simply\r\npoint your shell into `lib/fsdfs` and type `python setup.py install`.\r\nOf course you have to enable the specific toggle option in the json\r\nconfiguration file.\r\n\r\n## Needed libraries\r\n\r\nIn order to compile the C implementation of the indexer you need\r\nlibarchive and glib2. Take as reference your package manager manual.\r\n\r\n  - libarchive (2.8.5-2 - http://libarchive.googlecode.com/)\r\n  - glib2 (2.30.1-1 - http://www.gtk.org/)\r\n\r\n## Fetching the sources\r\n\r\nIn order to fetch the software with all the dependencies just type in your\r\nconsole:\r\n\r\n    $ git clone git://github.com/nopper/PomeGranate.git\r\n    $ cd PomeGranate\r\n\r\n## Installation\r\n\r\nI strongly suggest you to use virtualenv in order to test PomeGranate without\r\nimpacting your python installation globally:\r\n\r\n    $ virtualenv env\r\n    $ . env/bin/activate\r\n    New python executable in env/bin/python\r\n    Installing setuptools............done.\r\n    Installing pip...............done.\r\n    $ python setup.py install\r\n    [...]\r\n\r\n### Installing FSDFS - Optional\r\n\r\nIn case you don't have a distributed FS like NFS or AFS you can simply use\r\nFSDFS which is supported by PomeGranate:\r\n\r\n    $ git submodule init\r\n    $ git submodule update\r\n    $ cd lib/fsdfs\r\n    $ python setup.py install\r\n\r\n## Running the default ri application\r\n\r\nIn the source distribution you will find a simple MapReduce application for\r\nReverse Index creation (here comes the name). A part of the application is\r\ndeveloped in C language. In order to build the mapper and the reducer\r\ncomponents you need `make`, `gcc`, `glib-2.0`, `libarchive`:\r\n\r\n    $ cd apps/ri/indexer/\r\n    $ make\r\n\r\nThe Makefile is hardcoded so if you are not able to get a clean build try\r\nto play a little bit with the parameters. After the build you should get\r\ntwo executables namely:\r\n\r\n  - `apps/ri/indexer/map/mapper`\r\n  - `apps/ri/indexer/reduce/reducer`\r\n\r\nThe absolute path to these executables should match the `map-executable`\r\nand `reduce-executable` parameters in the JSON configuration file. Another\r\nparameter you would like to change is `limit-size` an integer value which\r\nlimits the maximum number of KB that the mapper will use to keep in RAM\r\nall the information before flushing all the data to an output file.\r\n\r\n## Configuration file\r\n\r\nThe configuration file is a simple JSON file that express various parameters\r\nthat will be used by various parts of the application. The parameters are:\r\n\r\n  - `num-mapper`: integer indicating the number of mapper to use\r\n  - `num-reducer`: integer indicating the number of reducer to use\r\n  - `machine-file`: string indicating the machine file to use for deploying\r\n                    workers through MPI process abstraction\r\n  - `main-module`: string indicating the Python main module to use\r\n  - `input-module`: string indicating the Python Input module to use\r\n  - `map-module`: string indicating the Python Map module to use\r\n  - `reduce-module`: string indicating the Python Reduce module to use\r\n  - `threshold-nfile`: integer indicating the maximum number of files that\r\n                       can be reduced in a row.\r\n  - `ping-interval`: integer indicating the interval in seconds between two\r\n                     consecutive ping probes.\r\n  - `sleep-interval`: numeric indicating seconds between two consecuting\r\n                      work requests from the generic worker\r\n  - `master-host`: string indicating the IP on which the server will bind to\r\n  - `master-port`: integer indicating the port on which the server will\r\n                   listen to\r\n  - `master-url`: string indicating a URI in the form\r\n                  `http://<master-host>:<master-port`\r\n  - `datadir`: a string indicating the directory where all files (both\r\n               inputs and outputs) are be stored\r\n  - `input-prefix`: a string indicating a suffix for the datadir parameter.\r\n                    All the input files should be located in\r\n                     `<datadir>/<input-prefix>`.\r\n  - `output-prefix`: a string indicating a suffix for the datadir parameter.\r\n                     All the output files will be stored inside\r\n                     `<datadir>/<output-prefix>`.\r\n\r\nThe following parameters are related to the DFS module:\r\n\r\n  - `dfs-enabled`: boolean indicating if DFS support will be used\r\n  - `dfs-host`: string indicating the IP on which the node will listen on\r\n  - `dfs-startport`: integer indicating a TCP port. Every worker will listen\r\n                     onto `startport` + `unique_worker_id`.\r\n  - `dfs-conf`: a dictionary which include valid parameters for configuring\r\n                FSDFS nodes.\r\n","tagline":"Fully fault tolerant MapReduce framework built on top of MPI, Python and HTTP","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}